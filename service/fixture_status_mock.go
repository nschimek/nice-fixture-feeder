// Code generated by mockery v2.28.0. DO NOT EDIT.

package service

import mock "github.com/stretchr/testify/mock"

// MockFixtureStatusService is an autogenerated mock type for the FixtureStatusService type
type MockFixtureStatusService struct {
	mock.Mock
}

type MockFixtureStatusService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFixtureStatusService) EXPECT() *MockFixtureStatusService_Expecter {
	return &MockFixtureStatusService_Expecter{mock: &_m.Mock}
}

// GetType provides a mock function with given fields: id
func (_m *MockFixtureStatusService) GetType(id string) string {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockFixtureStatusService_GetType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetType'
type MockFixtureStatusService_GetType_Call struct {
	*mock.Call
}

// GetType is a helper method to define mock.On call
//   - id string
func (_e *MockFixtureStatusService_Expecter) GetType(id interface{}) *MockFixtureStatusService_GetType_Call {
	return &MockFixtureStatusService_GetType_Call{Call: _e.mock.On("GetType", id)}
}

func (_c *MockFixtureStatusService_GetType_Call) Run(run func(id string)) *MockFixtureStatusService_GetType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFixtureStatusService_GetType_Call) Return(_a0 string) *MockFixtureStatusService_GetType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFixtureStatusService_GetType_Call) RunAndReturn(run func(string) string) *MockFixtureStatusService_GetType_Call {
	_c.Call.Return(run)
	return _c
}

// IsFinished provides a mock function with given fields: id
func (_m *MockFixtureStatusService) IsFinished(id string) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockFixtureStatusService_IsFinished_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFinished'
type MockFixtureStatusService_IsFinished_Call struct {
	*mock.Call
}

// IsFinished is a helper method to define mock.On call
//   - id string
func (_e *MockFixtureStatusService_Expecter) IsFinished(id interface{}) *MockFixtureStatusService_IsFinished_Call {
	return &MockFixtureStatusService_IsFinished_Call{Call: _e.mock.On("IsFinished", id)}
}

func (_c *MockFixtureStatusService_IsFinished_Call) Run(run func(id string)) *MockFixtureStatusService_IsFinished_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFixtureStatusService_IsFinished_Call) Return(_a0 bool) *MockFixtureStatusService_IsFinished_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFixtureStatusService_IsFinished_Call) RunAndReturn(run func(string) bool) *MockFixtureStatusService_IsFinished_Call {
	_c.Call.Return(run)
	return _c
}

// IsScheduled provides a mock function with given fields: id
func (_m *MockFixtureStatusService) IsScheduled(id string) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockFixtureStatusService_IsScheduled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsScheduled'
type MockFixtureStatusService_IsScheduled_Call struct {
	*mock.Call
}

// IsScheduled is a helper method to define mock.On call
//   - id string
func (_e *MockFixtureStatusService_Expecter) IsScheduled(id interface{}) *MockFixtureStatusService_IsScheduled_Call {
	return &MockFixtureStatusService_IsScheduled_Call{Call: _e.mock.On("IsScheduled", id)}
}

func (_c *MockFixtureStatusService_IsScheduled_Call) Run(run func(id string)) *MockFixtureStatusService_IsScheduled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFixtureStatusService_IsScheduled_Call) Return(_a0 bool) *MockFixtureStatusService_IsScheduled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFixtureStatusService_IsScheduled_Call) RunAndReturn(run func(string) bool) *MockFixtureStatusService_IsScheduled_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockFixtureStatusService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockFixtureStatusService creates a new instance of MockFixtureStatusService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockFixtureStatusService(t mockConstructorTestingTNewMockFixtureStatusService) *MockFixtureStatusService {
	mock := &MockFixtureStatusService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
