// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	model "github.com/nschimek/nice-fixture-feeder/model"
	mock "github.com/stretchr/testify/mock"
)

// Scoring is an autogenerated mock type for the Scoring type
type Scoring struct {
	mock.Mock
}

type Scoring_Expecter struct {
	mock *mock.Mock
}

func (_m *Scoring) EXPECT() *Scoring_Expecter {
	return &Scoring_Expecter{mock: &_m.Mock}
}

// AddFixturesFromMinMap provides a mock function with given fields: _a0
func (_m *Scoring) AddFixturesFromMinMap(_a0 map[model.TeamLeagueSeasonId]int) {
	_m.Called(_a0)
}

// Scoring_AddFixturesFromMinMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFixturesFromMinMap'
type Scoring_AddFixturesFromMinMap_Call struct {
	*mock.Call
}

// AddFixturesFromMinMap is a helper method to define mock.On call
//   - _a0 map[model.TeamLeagueSeasonId]int
func (_e *Scoring_Expecter) AddFixturesFromMinMap(_a0 interface{}) *Scoring_AddFixturesFromMinMap_Call {
	return &Scoring_AddFixturesFromMinMap_Call{Call: _e.mock.On("AddFixturesFromMinMap", _a0)}
}

func (_c *Scoring_AddFixturesFromMinMap_Call) Run(run func(_a0 map[model.TeamLeagueSeasonId]int)) *Scoring_AddFixturesFromMinMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[model.TeamLeagueSeasonId]int))
	})
	return _c
}

func (_c *Scoring_AddFixturesFromMinMap_Call) Return() *Scoring_AddFixturesFromMinMap_Call {
	_c.Call.Return()
	return _c
}

func (_c *Scoring_AddFixturesFromMinMap_Call) RunAndReturn(run func(map[model.TeamLeagueSeasonId]int)) *Scoring_AddFixturesFromMinMap_Call {
	_c.Call.Return(run)
	return _c
}

// Score provides a mock function with given fields:
func (_m *Scoring) Score() {
	_m.Called()
}

// Scoring_Score_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Score'
type Scoring_Score_Call struct {
	*mock.Call
}

// Score is a helper method to define mock.On call
func (_e *Scoring_Expecter) Score() *Scoring_Score_Call {
	return &Scoring_Score_Call{Call: _e.mock.On("Score")}
}

func (_c *Scoring_Score_Call) Run(run func()) *Scoring_Score_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Scoring_Score_Call) Return() *Scoring_Score_Call {
	_c.Call.Return()
	return _c
}

func (_c *Scoring_Score_Call) RunAndReturn(run func()) *Scoring_Score_Call {
	_c.Call.Return(run)
	return _c
}

// SetFixtures provides a mock function with given fields: fixtures
func (_m *Scoring) SetFixtures(fixtures map[int]model.Fixture) {
	_m.Called(fixtures)
}

// Scoring_SetFixtures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFixtures'
type Scoring_SetFixtures_Call struct {
	*mock.Call
}

// SetFixtures is a helper method to define mock.On call
//   - fixtures map[int]model.Fixture
func (_e *Scoring_Expecter) SetFixtures(fixtures interface{}) *Scoring_SetFixtures_Call {
	return &Scoring_SetFixtures_Call{Call: _e.mock.On("SetFixtures", fixtures)}
}

func (_c *Scoring_SetFixtures_Call) Run(run func(fixtures map[int]model.Fixture)) *Scoring_SetFixtures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[int]model.Fixture))
	})
	return _c
}

func (_c *Scoring_SetFixtures_Call) Return() *Scoring_SetFixtures_Call {
	_c.Call.Return()
	return _c
}

func (_c *Scoring_SetFixtures_Call) RunAndReturn(run func(map[int]model.Fixture)) *Scoring_SetFixtures_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewScoring interface {
	mock.TestingT
	Cleanup(func())
}

// NewScoring creates a new instance of Scoring. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewScoring(t mockConstructorTestingTNewScoring) *Scoring {
	mock := &Scoring{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
