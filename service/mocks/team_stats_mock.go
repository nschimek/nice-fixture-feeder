// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	model "github.com/nschimek/nice-fixture-feeder/model"
	mock "github.com/stretchr/testify/mock"
)

// TeamStats is an autogenerated mock type for the TeamStats type
type TeamStats struct {
	mock.Mock
}

type TeamStats_Expecter struct {
	mock *mock.Mock
}

func (_m *TeamStats) EXPECT() *TeamStats_Expecter {
	return &TeamStats_Expecter{mock: &_m.Mock}
}

// GetById provides a mock function with given fields: tsid
func (_m *TeamStats) GetById(tsid model.TeamStatsId) (*model.TeamStats, error) {
	ret := _m.Called(tsid)

	var r0 *model.TeamStats
	var r1 error
	if rf, ok := ret.Get(0).(func(model.TeamStatsId) (*model.TeamStats, error)); ok {
		return rf(tsid)
	}
	if rf, ok := ret.Get(0).(func(model.TeamStatsId) *model.TeamStats); ok {
		r0 = rf(tsid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TeamStats)
		}
	}

	if rf, ok := ret.Get(1).(func(model.TeamStatsId) error); ok {
		r1 = rf(tsid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamStats_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type TeamStats_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - tsid model.TeamStatsId
func (_e *TeamStats_Expecter) GetById(tsid interface{}) *TeamStats_GetById_Call {
	return &TeamStats_GetById_Call{Call: _e.mock.On("GetById", tsid)}
}

func (_c *TeamStats_GetById_Call) Run(run func(tsid model.TeamStatsId)) *TeamStats_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.TeamStatsId))
	})
	return _c
}

func (_c *TeamStats_GetById_Call) Return(_a0 *model.TeamStats, _a1 error) *TeamStats_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TeamStats_GetById_Call) RunAndReturn(run func(model.TeamStatsId) (*model.TeamStats, error)) *TeamStats_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetByIdWithTLS provides a mock function with given fields: tsid, current
func (_m *TeamStats) GetByIdWithTLS(tsid model.TeamStatsId, current bool) (*model.TeamStats, error) {
	ret := _m.Called(tsid, current)

	var r0 *model.TeamStats
	var r1 error
	if rf, ok := ret.Get(0).(func(model.TeamStatsId, bool) (*model.TeamStats, error)); ok {
		return rf(tsid, current)
	}
	if rf, ok := ret.Get(0).(func(model.TeamStatsId, bool) *model.TeamStats); ok {
		r0 = rf(tsid, current)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TeamStats)
		}
	}

	if rf, ok := ret.Get(1).(func(model.TeamStatsId, bool) error); ok {
		r1 = rf(tsid, current)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamStats_GetByIdWithTLS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIdWithTLS'
type TeamStats_GetByIdWithTLS_Call struct {
	*mock.Call
}

// GetByIdWithTLS is a helper method to define mock.On call
//   - tsid model.TeamStatsId
//   - current bool
func (_e *TeamStats_Expecter) GetByIdWithTLS(tsid interface{}, current interface{}) *TeamStats_GetByIdWithTLS_Call {
	return &TeamStats_GetByIdWithTLS_Call{Call: _e.mock.On("GetByIdWithTLS", tsid, current)}
}

func (_c *TeamStats_GetByIdWithTLS_Call) Run(run func(tsid model.TeamStatsId, current bool)) *TeamStats_GetByIdWithTLS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.TeamStatsId), args[1].(bool))
	})
	return _c
}

func (_c *TeamStats_GetByIdWithTLS_Call) Return(_a0 *model.TeamStats, _a1 error) *TeamStats_GetByIdWithTLS_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TeamStats_GetByIdWithTLS_Call) RunAndReturn(run func(model.TeamStatsId, bool) (*model.TeamStats, error)) *TeamStats_GetByIdWithTLS_Call {
	_c.Call.Return(run)
	return _c
}

// GetMinFixtureMap provides a mock function with given fields:
func (_m *TeamStats) GetMinFixtureMap() map[model.TeamLeagueSeasonId]int {
	ret := _m.Called()

	var r0 map[model.TeamLeagueSeasonId]int
	if rf, ok := ret.Get(0).(func() map[model.TeamLeagueSeasonId]int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[model.TeamLeagueSeasonId]int)
		}
	}

	return r0
}

// TeamStats_GetMinFixtureMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMinFixtureMap'
type TeamStats_GetMinFixtureMap_Call struct {
	*mock.Call
}

// GetMinFixtureMap is a helper method to define mock.On call
func (_e *TeamStats_Expecter) GetMinFixtureMap() *TeamStats_GetMinFixtureMap_Call {
	return &TeamStats_GetMinFixtureMap_Call{Call: _e.mock.On("GetMinFixtureMap")}
}

func (_c *TeamStats_GetMinFixtureMap_Call) Run(run func()) *TeamStats_GetMinFixtureMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TeamStats_GetMinFixtureMap_Call) Return(_a0 map[model.TeamLeagueSeasonId]int) *TeamStats_GetMinFixtureMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamStats_GetMinFixtureMap_Call) RunAndReturn(run func() map[model.TeamLeagueSeasonId]int) *TeamStats_GetMinFixtureMap_Call {
	_c.Call.Return(run)
	return _c
}

// MaintainStats provides a mock function with given fields: fixtureIds, fixtureMap
func (_m *TeamStats) MaintainStats(fixtureIds []int, fixtureMap map[int]model.Fixture) {
	_m.Called(fixtureIds, fixtureMap)
}

// TeamStats_MaintainStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaintainStats'
type TeamStats_MaintainStats_Call struct {
	*mock.Call
}

// MaintainStats is a helper method to define mock.On call
//   - fixtureIds []int
//   - fixtureMap map[int]model.Fixture
func (_e *TeamStats_Expecter) MaintainStats(fixtureIds interface{}, fixtureMap interface{}) *TeamStats_MaintainStats_Call {
	return &TeamStats_MaintainStats_Call{Call: _e.mock.On("MaintainStats", fixtureIds, fixtureMap)}
}

func (_c *TeamStats_MaintainStats_Call) Run(run func(fixtureIds []int, fixtureMap map[int]model.Fixture)) *TeamStats_MaintainStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int), args[1].(map[int]model.Fixture))
	})
	return _c
}

func (_c *TeamStats_MaintainStats_Call) Return() *TeamStats_MaintainStats_Call {
	_c.Call.Return()
	return _c
}

func (_c *TeamStats_MaintainStats_Call) RunAndReturn(run func([]int, map[int]model.Fixture)) *TeamStats_MaintainStats_Call {
	_c.Call.Return(run)
	return _c
}

// Persist provides a mock function with given fields:
func (_m *TeamStats) Persist() {
	_m.Called()
}

// TeamStats_Persist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Persist'
type TeamStats_Persist_Call struct {
	*mock.Call
}

// Persist is a helper method to define mock.On call
func (_e *TeamStats_Expecter) Persist() *TeamStats_Persist_Call {
	return &TeamStats_Persist_Call{Call: _e.mock.On("Persist")}
}

func (_c *TeamStats_Persist_Call) Run(run func()) *TeamStats_Persist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TeamStats_Persist_Call) Return() *TeamStats_Persist_Call {
	_c.Call.Return()
	return _c
}

func (_c *TeamStats_Persist_Call) RunAndReturn(run func()) *TeamStats_Persist_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewTeamStats interface {
	mock.TestingT
	Cleanup(func())
}

// NewTeamStats creates a new instance of TeamStats. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTeamStats(t mockConstructorTestingTNewTeamStats) *TeamStats {
	mock := &TeamStats{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
