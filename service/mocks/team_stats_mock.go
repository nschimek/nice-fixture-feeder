// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	model "github.com/nschimek/nice-fixture-feeder/model"
	mock "github.com/stretchr/testify/mock"
)

// TeamStats is an autogenerated mock type for the TeamStats type
type TeamStats struct {
	mock.Mock
}

type TeamStats_Expecter struct {
	mock *mock.Mock
}

func (_m *TeamStats) EXPECT() *TeamStats_Expecter {
	return &TeamStats_Expecter{mock: &_m.Mock}
}

// MaintainStats provides a mock function with given fields: fixtureIds, fixtureMap
func (_m *TeamStats) MaintainStats(fixtureIds []int, fixtureMap map[int]model.Fixture) {
	_m.Called(fixtureIds, fixtureMap)
}

// TeamStats_MaintainStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaintainStats'
type TeamStats_MaintainStats_Call struct {
	*mock.Call
}

// MaintainStats is a helper method to define mock.On call
//   - fixtureIds []int
//   - fixtureMap map[int]model.Fixture
func (_e *TeamStats_Expecter) MaintainStats(fixtureIds interface{}, fixtureMap interface{}) *TeamStats_MaintainStats_Call {
	return &TeamStats_MaintainStats_Call{Call: _e.mock.On("MaintainStats", fixtureIds, fixtureMap)}
}

func (_c *TeamStats_MaintainStats_Call) Run(run func(fixtureIds []int, fixtureMap map[int]model.Fixture)) *TeamStats_MaintainStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int), args[1].(map[int]model.Fixture))
	})
	return _c
}

func (_c *TeamStats_MaintainStats_Call) Return() *TeamStats_MaintainStats_Call {
	_c.Call.Return()
	return _c
}

func (_c *TeamStats_MaintainStats_Call) RunAndReturn(run func([]int, map[int]model.Fixture)) *TeamStats_MaintainStats_Call {
	_c.Call.Return(run)
	return _c
}

// Persist provides a mock function with given fields:
func (_m *TeamStats) Persist() {
	_m.Called()
}

// TeamStats_Persist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Persist'
type TeamStats_Persist_Call struct {
	*mock.Call
}

// Persist is a helper method to define mock.On call
func (_e *TeamStats_Expecter) Persist() *TeamStats_Persist_Call {
	return &TeamStats_Persist_Call{Call: _e.mock.On("Persist")}
}

func (_c *TeamStats_Persist_Call) Run(run func()) *TeamStats_Persist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TeamStats_Persist_Call) Return() *TeamStats_Persist_Call {
	_c.Call.Return()
	return _c
}

func (_c *TeamStats_Persist_Call) RunAndReturn(run func()) *TeamStats_Persist_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewTeamStats interface {
	mock.TestingT
	Cleanup(func())
}

// NewTeamStats creates a new instance of TeamStats. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTeamStats(t mockConstructorTestingTNewTeamStats) *TeamStats {
	mock := &TeamStats{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
