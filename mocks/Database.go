// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	core "github.com/nschimek/nice-fixture-feeder/core"
	mock "github.com/stretchr/testify/mock"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// Upsert provides a mock function with given fields: value
func (_m *Database) Upsert(value interface{}) core.DatabaseResult {
	ret := _m.Called(value)

	var r0 core.DatabaseResult
	if rf, ok := ret.Get(0).(func(interface{}) core.DatabaseResult); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(core.DatabaseResult)
	}

	return r0
}

// UpsertWithOmit provides a mock function with given fields: value, omitColumns
func (_m *Database) UpsertWithOmit(value interface{}, omitColumns ...string) core.DatabaseResult {
	_va := make([]interface{}, len(omitColumns))
	for _i := range omitColumns {
		_va[_i] = omitColumns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, value)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 core.DatabaseResult
	if rf, ok := ret.Get(0).(func(interface{}, ...string) core.DatabaseResult); ok {
		r0 = rf(value, omitColumns...)
	} else {
		r0 = ret.Get(0).(core.DatabaseResult)
	}

	return r0
}

type mockConstructorTestingTNewDatabase interface {
	mock.TestingT
	Cleanup(func())
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDatabase(t mockConstructorTestingTNewDatabase) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
