// Code generated by mockery v2.28.0. DO NOT EDIT.

package core

import mock "github.com/stretchr/testify/mock"

// MockDatabase is an autogenerated mock type for the Database type
type MockDatabase struct {
	mock.Mock
}

type MockDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabase) EXPECT() *MockDatabase_Expecter {
	return &MockDatabase_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function with given fields: entities
func (_m *MockDatabase) GetAll(entities interface{}) {
	_m.Called(entities)
}

// MockDatabase_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockDatabase_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - entities interface{}
func (_e *MockDatabase_Expecter) GetAll(entities interface{}) *MockDatabase_GetAll_Call {
	return &MockDatabase_GetAll_Call{Call: _e.mock.On("GetAll", entities)}
}

func (_c *MockDatabase_GetAll_Call) Run(run func(entities interface{})) *MockDatabase_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockDatabase_GetAll_Call) Return() *MockDatabase_GetAll_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDatabase_GetAll_Call) RunAndReturn(run func(interface{})) *MockDatabase_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: id, entity
func (_m *MockDatabase) GetById(id interface{}, entity interface{}) {
	_m.Called(id, entity)
}

// MockDatabase_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockDatabase_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - id interface{}
//   - entity interface{}
func (_e *MockDatabase_Expecter) GetById(id interface{}, entity interface{}) *MockDatabase_GetById_Call {
	return &MockDatabase_GetById_Call{Call: _e.mock.On("GetById", id, entity)}
}

func (_c *MockDatabase_GetById_Call) Run(run func(id interface{}, entity interface{})) *MockDatabase_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(interface{}))
	})
	return _c
}

func (_c *MockDatabase_GetById_Call) Return() *MockDatabase_GetById_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDatabase_GetById_Call) RunAndReturn(run func(interface{}, interface{})) *MockDatabase_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function with given fields: value
func (_m *MockDatabase) Upsert(value interface{}) DatabaseResult {
	ret := _m.Called(value)

	var r0 DatabaseResult
	if rf, ok := ret.Get(0).(func(interface{}) DatabaseResult); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(DatabaseResult)
	}

	return r0
}

// MockDatabase_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type MockDatabase_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - value interface{}
func (_e *MockDatabase_Expecter) Upsert(value interface{}) *MockDatabase_Upsert_Call {
	return &MockDatabase_Upsert_Call{Call: _e.mock.On("Upsert", value)}
}

func (_c *MockDatabase_Upsert_Call) Run(run func(value interface{})) *MockDatabase_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockDatabase_Upsert_Call) Return(_a0 DatabaseResult) *MockDatabase_Upsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_Upsert_Call) RunAndReturn(run func(interface{}) DatabaseResult) *MockDatabase_Upsert_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertWithOmit provides a mock function with given fields: value, omitColumns
func (_m *MockDatabase) UpsertWithOmit(value interface{}, omitColumns ...string) DatabaseResult {
	_va := make([]interface{}, len(omitColumns))
	for _i := range omitColumns {
		_va[_i] = omitColumns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, value)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 DatabaseResult
	if rf, ok := ret.Get(0).(func(interface{}, ...string) DatabaseResult); ok {
		r0 = rf(value, omitColumns...)
	} else {
		r0 = ret.Get(0).(DatabaseResult)
	}

	return r0
}

// MockDatabase_UpsertWithOmit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertWithOmit'
type MockDatabase_UpsertWithOmit_Call struct {
	*mock.Call
}

// UpsertWithOmit is a helper method to define mock.On call
//   - value interface{}
//   - omitColumns ...string
func (_e *MockDatabase_Expecter) UpsertWithOmit(value interface{}, omitColumns ...interface{}) *MockDatabase_UpsertWithOmit_Call {
	return &MockDatabase_UpsertWithOmit_Call{Call: _e.mock.On("UpsertWithOmit",
		append([]interface{}{value}, omitColumns...)...)}
}

func (_c *MockDatabase_UpsertWithOmit_Call) Run(run func(value interface{}, omitColumns ...string)) *MockDatabase_UpsertWithOmit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockDatabase_UpsertWithOmit_Call) Return(_a0 DatabaseResult) *MockDatabase_UpsertWithOmit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_UpsertWithOmit_Call) RunAndReturn(run func(interface{}, ...string) DatabaseResult) *MockDatabase_UpsertWithOmit_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockDatabase interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDatabase creates a new instance of MockDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDatabase(t mockConstructorTestingTNewMockDatabase) *MockDatabase {
	mock := &MockDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
