// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	model "github.com/nschimek/nice-fixture-feeder/model"
	mock "github.com/stretchr/testify/mock"
)

// Fixture is an autogenerated mock type for the Fixture type
type Fixture struct {
	mock.Mock
}

type Fixture_Expecter struct {
	mock *mock.Mock
}

func (_m *Fixture) EXPECT() *Fixture_Expecter {
	return &Fixture_Expecter{mock: &_m.Mock}
}

// GetFutureFixturesByTLS provides a mock function with given fields: tlsId, minId, notId
func (_m *Fixture) GetFutureFixturesByTLS(tlsId model.TeamLeagueSeasonId, minId int, notId []int) ([]model.Fixture, error) {
	ret := _m.Called(tlsId, minId, notId)

	var r0 []model.Fixture
	var r1 error
	if rf, ok := ret.Get(0).(func(model.TeamLeagueSeasonId, int, []int) ([]model.Fixture, error)); ok {
		return rf(tlsId, minId, notId)
	}
	if rf, ok := ret.Get(0).(func(model.TeamLeagueSeasonId, int, []int) []model.Fixture); ok {
		r0 = rf(tlsId, minId, notId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Fixture)
		}
	}

	if rf, ok := ret.Get(1).(func(model.TeamLeagueSeasonId, int, []int) error); ok {
		r1 = rf(tlsId, minId, notId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fixture_GetFutureFixturesByTLS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFutureFixturesByTLS'
type Fixture_GetFutureFixturesByTLS_Call struct {
	*mock.Call
}

// GetFutureFixturesByTLS is a helper method to define mock.On call
//   - tlsId model.TeamLeagueSeasonId
//   - minId int
//   - notId []int
func (_e *Fixture_Expecter) GetFutureFixturesByTLS(tlsId interface{}, minId interface{}, notId interface{}) *Fixture_GetFutureFixturesByTLS_Call {
	return &Fixture_GetFutureFixturesByTLS_Call{Call: _e.mock.On("GetFutureFixturesByTLS", tlsId, minId, notId)}
}

func (_c *Fixture_GetFutureFixturesByTLS_Call) Run(run func(tlsId model.TeamLeagueSeasonId, minId int, notId []int)) *Fixture_GetFutureFixturesByTLS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.TeamLeagueSeasonId), args[1].(int), args[2].([]int))
	})
	return _c
}

func (_c *Fixture_GetFutureFixturesByTLS_Call) Return(_a0 []model.Fixture, _a1 error) *Fixture_GetFutureFixturesByTLS_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Fixture_GetFutureFixturesByTLS_Call) RunAndReturn(run func(model.TeamLeagueSeasonId, int, []int) ([]model.Fixture, error)) *Fixture_GetFutureFixturesByTLS_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function with given fields: entities
func (_m *Fixture) Upsert(entities []model.Fixture) ([]model.Fixture, error) {
	ret := _m.Called(entities)

	var r0 []model.Fixture
	var r1 error
	if rf, ok := ret.Get(0).(func([]model.Fixture) ([]model.Fixture, error)); ok {
		return rf(entities)
	}
	if rf, ok := ret.Get(0).(func([]model.Fixture) []model.Fixture); ok {
		r0 = rf(entities)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Fixture)
		}
	}

	if rf, ok := ret.Get(1).(func([]model.Fixture) error); ok {
		r1 = rf(entities)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fixture_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type Fixture_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - entities []model.Fixture
func (_e *Fixture_Expecter) Upsert(entities interface{}) *Fixture_Upsert_Call {
	return &Fixture_Upsert_Call{Call: _e.mock.On("Upsert", entities)}
}

func (_c *Fixture_Upsert_Call) Run(run func(entities []model.Fixture)) *Fixture_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]model.Fixture))
	})
	return _c
}

func (_c *Fixture_Upsert_Call) Return(_a0 []model.Fixture, _a1 error) *Fixture_Upsert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Fixture_Upsert_Call) RunAndReturn(run func([]model.Fixture) ([]model.Fixture, error)) *Fixture_Upsert_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertOne provides a mock function with given fields: entity
func (_m *Fixture) UpsertOne(entity model.Fixture) (model.Fixture, error) {
	ret := _m.Called(entity)

	var r0 model.Fixture
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Fixture) (model.Fixture, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(model.Fixture) model.Fixture); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(model.Fixture)
	}

	if rf, ok := ret.Get(1).(func(model.Fixture) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fixture_UpsertOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertOne'
type Fixture_UpsertOne_Call struct {
	*mock.Call
}

// UpsertOne is a helper method to define mock.On call
//   - entity model.Fixture
func (_e *Fixture_Expecter) UpsertOne(entity interface{}) *Fixture_UpsertOne_Call {
	return &Fixture_UpsertOne_Call{Call: _e.mock.On("UpsertOne", entity)}
}

func (_c *Fixture_UpsertOne_Call) Run(run func(entity model.Fixture)) *Fixture_UpsertOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.Fixture))
	})
	return _c
}

func (_c *Fixture_UpsertOne_Call) Return(_a0 model.Fixture, _a1 error) *Fixture_UpsertOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Fixture_UpsertOne_Call) RunAndReturn(run func(model.Fixture) (model.Fixture, error)) *Fixture_UpsertOne_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewFixture interface {
	mock.TestingT
	Cleanup(func())
}

// NewFixture creates a new instance of Fixture. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFixture(t mockConstructorTestingTNewFixture) *Fixture {
	mock := &Fixture{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
