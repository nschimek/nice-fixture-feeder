// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	model "github.com/nschimek/nice-fixture-feeder/model"
	mock "github.com/stretchr/testify/mock"
)

// TeamStats is an autogenerated mock type for the TeamStats type
type TeamStats struct {
	mock.Mock
}

type TeamStats_Expecter struct {
	mock *mock.Mock
}

func (_m *TeamStats) EXPECT() *TeamStats_Expecter {
	return &TeamStats_Expecter{mock: &_m.Mock}
}

// GetById provides a mock function with given fields: id
func (_m *TeamStats) GetById(id model.TeamStatsId) (*model.TeamStats, error) {
	ret := _m.Called(id)

	var r0 *model.TeamStats
	var r1 error
	if rf, ok := ret.Get(0).(func(model.TeamStatsId) (*model.TeamStats, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(model.TeamStatsId) *model.TeamStats); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TeamStats)
		}
	}

	if rf, ok := ret.Get(1).(func(model.TeamStatsId) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamStats_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type TeamStats_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - id model.TeamStatsId
func (_e *TeamStats_Expecter) GetById(id interface{}) *TeamStats_GetById_Call {
	return &TeamStats_GetById_Call{Call: _e.mock.On("GetById", id)}
}

func (_c *TeamStats_GetById_Call) Run(run func(id model.TeamStatsId)) *TeamStats_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.TeamStatsId))
	})
	return _c
}

func (_c *TeamStats_GetById_Call) Return(_a0 *model.TeamStats, _a1 error) *TeamStats_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TeamStats_GetById_Call) RunAndReturn(run func(model.TeamStatsId) (*model.TeamStats, error)) *TeamStats_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function with given fields: entities
func (_m *TeamStats) Upsert(entities []model.TeamStats) ([]model.TeamStats, error) {
	ret := _m.Called(entities)

	var r0 []model.TeamStats
	var r1 error
	if rf, ok := ret.Get(0).(func([]model.TeamStats) ([]model.TeamStats, error)); ok {
		return rf(entities)
	}
	if rf, ok := ret.Get(0).(func([]model.TeamStats) []model.TeamStats); ok {
		r0 = rf(entities)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.TeamStats)
		}
	}

	if rf, ok := ret.Get(1).(func([]model.TeamStats) error); ok {
		r1 = rf(entities)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamStats_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type TeamStats_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - entities []model.TeamStats
func (_e *TeamStats_Expecter) Upsert(entities interface{}) *TeamStats_Upsert_Call {
	return &TeamStats_Upsert_Call{Call: _e.mock.On("Upsert", entities)}
}

func (_c *TeamStats_Upsert_Call) Run(run func(entities []model.TeamStats)) *TeamStats_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]model.TeamStats))
	})
	return _c
}

func (_c *TeamStats_Upsert_Call) Return(_a0 []model.TeamStats, _a1 error) *TeamStats_Upsert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TeamStats_Upsert_Call) RunAndReturn(run func([]model.TeamStats) ([]model.TeamStats, error)) *TeamStats_Upsert_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewTeamStats interface {
	mock.TestingT
	Cleanup(func())
}

// NewTeamStats creates a new instance of TeamStats. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTeamStats(t mockConstructorTestingTNewTeamStats) *TeamStats {
	mock := &TeamStats{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
