// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// GetByIdRepository is an autogenerated mock type for the GetByIdRepository type
type GetByIdRepository[T interface{}, I interface{}] struct {
	mock.Mock
}

type GetByIdRepository_Expecter[T interface{}, I interface{}] struct {
	mock *mock.Mock
}

func (_m *GetByIdRepository[T, I]) EXPECT() *GetByIdRepository_Expecter[T, I] {
	return &GetByIdRepository_Expecter[T, I]{mock: &_m.Mock}
}

// GetById provides a mock function with given fields: id
func (_m *GetByIdRepository[T, I]) GetById(id I) (*T, error) {
	ret := _m.Called(id)

	var r0 *T
	var r1 error
	if rf, ok := ret.Get(0).(func(I) (*T, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(I) *T); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	if rf, ok := ret.Get(1).(func(I) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIdRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type GetByIdRepository_GetById_Call[T interface{}, I interface{}] struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - id I
func (_e *GetByIdRepository_Expecter[T, I]) GetById(id interface{}) *GetByIdRepository_GetById_Call[T, I] {
	return &GetByIdRepository_GetById_Call[T, I]{Call: _e.mock.On("GetById", id)}
}

func (_c *GetByIdRepository_GetById_Call[T, I]) Run(run func(id I)) *GetByIdRepository_GetById_Call[T, I] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(I))
	})
	return _c
}

func (_c *GetByIdRepository_GetById_Call[T, I]) Return(_a0 *T, _a1 error) *GetByIdRepository_GetById_Call[T, I] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GetByIdRepository_GetById_Call[T, I]) RunAndReturn(run func(I) (*T, error)) *GetByIdRepository_GetById_Call[T, I] {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewGetByIdRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewGetByIdRepository creates a new instance of GetByIdRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGetByIdRepository[T interface{}, I interface{}](t mockConstructorTestingTNewGetByIdRepository) *GetByIdRepository[T, I] {
	mock := &GetByIdRepository[T, I]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
