// Code generated by mockery v2.28.0. DO NOT EDIT.

package repository

import (
	model "github.com/nschimek/nice-fixture-feeder/model"
	mock "github.com/stretchr/testify/mock"
)

// MockTeamStatsRepository is an autogenerated mock type for the TeamStatsRepository type
type MockTeamStatsRepository struct {
	mock.Mock
}

type MockTeamStatsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTeamStatsRepository) EXPECT() *MockTeamStatsRepository_Expecter {
	return &MockTeamStatsRepository_Expecter{mock: &_m.Mock}
}

// GetById provides a mock function with given fields: id
func (_m *MockTeamStatsRepository) GetById(id model.TeamStats) *model.TeamStats {
	ret := _m.Called(id)

	var r0 *model.TeamStats
	if rf, ok := ret.Get(0).(func(model.TeamStats) *model.TeamStats); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TeamStats)
		}
	}

	return r0
}

// MockTeamStatsRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockTeamStatsRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - id model.TeamStats
func (_e *MockTeamStatsRepository_Expecter) GetById(id interface{}) *MockTeamStatsRepository_GetById_Call {
	return &MockTeamStatsRepository_GetById_Call{Call: _e.mock.On("GetById", id)}
}

func (_c *MockTeamStatsRepository_GetById_Call) Run(run func(id model.TeamStats)) *MockTeamStatsRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.TeamStats))
	})
	return _c
}

func (_c *MockTeamStatsRepository_GetById_Call) Return(_a0 *model.TeamStats) *MockTeamStatsRepository_GetById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTeamStatsRepository_GetById_Call) RunAndReturn(run func(model.TeamStats) *model.TeamStats) *MockTeamStatsRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: entity
func (_m *MockTeamStatsRepository) Save(entity *model.TeamStats) (*model.TeamStats, error) {
	ret := _m.Called(entity)

	var r0 *model.TeamStats
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.TeamStats) (*model.TeamStats, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(*model.TeamStats) *model.TeamStats); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TeamStats)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.TeamStats) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamStatsRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockTeamStatsRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - entity *model.TeamStats
func (_e *MockTeamStatsRepository_Expecter) Save(entity interface{}) *MockTeamStatsRepository_Save_Call {
	return &MockTeamStatsRepository_Save_Call{Call: _e.mock.On("Save", entity)}
}

func (_c *MockTeamStatsRepository_Save_Call) Run(run func(entity *model.TeamStats)) *MockTeamStatsRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.TeamStats))
	})
	return _c
}

func (_c *MockTeamStatsRepository_Save_Call) Return(_a0 *model.TeamStats, _a1 error) *MockTeamStatsRepository_Save_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamStatsRepository_Save_Call) RunAndReturn(run func(*model.TeamStats) (*model.TeamStats, error)) *MockTeamStatsRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function with given fields: entities
func (_m *MockTeamStatsRepository) Upsert(entities []model.TeamStats) *ResultStats {
	ret := _m.Called(entities)

	var r0 *ResultStats
	if rf, ok := ret.Get(0).(func([]model.TeamStats) *ResultStats); ok {
		r0 = rf(entities)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ResultStats)
		}
	}

	return r0
}

// MockTeamStatsRepository_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type MockTeamStatsRepository_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - entities []model.TeamStats
func (_e *MockTeamStatsRepository_Expecter) Upsert(entities interface{}) *MockTeamStatsRepository_Upsert_Call {
	return &MockTeamStatsRepository_Upsert_Call{Call: _e.mock.On("Upsert", entities)}
}

func (_c *MockTeamStatsRepository_Upsert_Call) Run(run func(entities []model.TeamStats)) *MockTeamStatsRepository_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]model.TeamStats))
	})
	return _c
}

func (_c *MockTeamStatsRepository_Upsert_Call) Return(_a0 *ResultStats) *MockTeamStatsRepository_Upsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTeamStatsRepository_Upsert_Call) RunAndReturn(run func([]model.TeamStats) *ResultStats) *MockTeamStatsRepository_Upsert_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockTeamStatsRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTeamStatsRepository creates a new instance of MockTeamStatsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTeamStatsRepository(t mockConstructorTestingTNewMockTeamStatsRepository) *MockTeamStatsRepository {
	mock := &MockTeamStatsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
