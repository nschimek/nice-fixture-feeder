// Code generated by mockery v2.28.0. DO NOT EDIT.

package repository

import mock "github.com/stretchr/testify/mock"

// MockSaveRepository is an autogenerated mock type for the SaveRepository type
type MockSaveRepository[T interface{}] struct {
	mock.Mock
}

type MockSaveRepository_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *MockSaveRepository[T]) EXPECT() *MockSaveRepository_Expecter[T] {
	return &MockSaveRepository_Expecter[T]{mock: &_m.Mock}
}

// Save provides a mock function with given fields: entity
func (_m *MockSaveRepository[T]) Save(entity *T) (*T, error) {
	ret := _m.Called(entity)

	var r0 *T
	var r1 error
	if rf, ok := ret.Get(0).(func(*T) (*T, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(*T) *T); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	if rf, ok := ret.Get(1).(func(*T) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSaveRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockSaveRepository_Save_Call[T interface{}] struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - entity *T
func (_e *MockSaveRepository_Expecter[T]) Save(entity interface{}) *MockSaveRepository_Save_Call[T] {
	return &MockSaveRepository_Save_Call[T]{Call: _e.mock.On("Save", entity)}
}

func (_c *MockSaveRepository_Save_Call[T]) Run(run func(entity *T)) *MockSaveRepository_Save_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*T))
	})
	return _c
}

func (_c *MockSaveRepository_Save_Call[T]) Return(_a0 *T, _a1 error) *MockSaveRepository_Save_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSaveRepository_Save_Call[T]) RunAndReturn(run func(*T) (*T, error)) *MockSaveRepository_Save_Call[T] {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockSaveRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockSaveRepository creates a new instance of MockSaveRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockSaveRepository[T interface{}](t mockConstructorTestingTNewMockSaveRepository) *MockSaveRepository[T] {
	mock := &MockSaveRepository[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
